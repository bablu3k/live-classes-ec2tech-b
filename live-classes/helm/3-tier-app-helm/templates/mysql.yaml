apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: {{ include "3tier.namespace" . }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.mysql.storageSize }}
  storageClassName: {{ .Values.mysql.storageClass }}

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: {{ include "3tier.namespace" . }}
type: Opaque
data:
  mysql-root-password: {{ .Values.mysql.rootPassword }}
  mysql-password: {{ .Values.mysql.password }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb
  namespace: {{ include "3tier.namespace" . }}
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS {{ .Values.mysql.database }};
    USE {{ .Values.mysql.database }};

    CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(50) NOT NULL,
      email VARCHAR(100) NOT NULL
    );

    INSERT INTO users (name, email)
    VALUES
    ('Alice', 'alice@example.com'),
    ('Bob', 'bob@example.com');

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: {{ include "3tier.namespace" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: {{ .Values.mysql.image }}
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-root-password
          - name: MYSQL_USER
            value: {{ .Values.mysql.user }}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-password
          - name: MYSQL_DATABASE
            value: {{ .Values.mysql.database }}
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-initdb
        configMap:
          name: mysql-initdb
          items:
            - key: init.sql
              path: init.sql

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: {{ include "3tier.namespace" . }}
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
